name: Build-Release

on: 
  push:
    tags:
      - 'v*'

jobs:
  build_windows_exe:
    # https://github.com/actions/virtual-environments/blob/master/images/win/Windows2019-Readme.md
    runs-on: windows-2019
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      sha2_windows: ${{ steps.sha2_file_exe.outputs.sha2_windows }}
      sha2_windows_installer: ${{ steps.sha2_file_installer.outputs.sha2_windows_installer }}
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        release: true
        update: true
        install: base-devel git vim mingw-w64-x86_64-toolchain mingw-w64-x86_64-qt5-static mingw-w64-x86_64-qt-installer-framework
        path-type: minimal
    - uses: actions/checkout@v2
    - name: Get Tag version
      id: get_version
      shell: bash
      run: echo "::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}"
    - name: Write CryToKey from Secrets to Headers files
      id: crytokey
      env:
        CRYTOKEY: ${{ secrets.CRYTOKEY }}
      run: |
        sed -i -r "s/crytokey = ([0-9]+)/crytokey = ${CRYTOKEY}/" configuration.h mainwindow.h
    - name: Build x64 release GUI and Installer Binary
      id: build_x64_release
      run: |
        # Actualizar Qt install bins 
        PATH=/mingw64/qt5-static/bin/:$PATH
        export PATH
        chmod +x ./make_installer.sh
        ./make_installer.sh
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: picta-dl-gui 
        body: "Picta Downloader GUI ${{ steps.get_version.outputs.VERSION }}"
        draft: false
        prerelease: false
    - name: Upload Executable Picta-dl_GUI.exe
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release/Picta-dl_GUI.exe
        asset_name: Picta-dl_GUI.exe
        asset_content_type: application/octet-stream
    - name: Get SHA2-256SUMS for Picta-dl_GUI.exe
      id: sha2_file_exe
      env:
        SHA2: ${{ hashFiles('release/Picta-dl_GUI.exe') }}
      run: echo "::set-output name=sha2_windows::${SHA2}"
    - name: Upload PictaDownloaderGUI-Installer.exe Binary
      id: upload-release-asset-installer
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./PictaDownloaderGUI-Installer.exe
        asset_name: PictaDownloaderGUI-Installer.exe
        asset_content_type: application/octet-stream
    - name: Get SHA2-256SUMS for PictaDownloaderGUI-Installer.exe
      id: sha2_file_installer
      env:
        SHA2: ${{ hashFiles('PictaDownloaderGUI-Installer.exe') }}
      run: echo "::set-output name=sha2_windows_installer::${SHA2}"
  build_ubuntu_deb:
    needs: build_windows_exe
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install Depends
      run: sudo apt-get -y install build-essential g++ qt5-default qt5-qmake qtbase5-dev qtbase5-dev-tools dh-make devscripts fakeroot pbuilder
    - name: Write CryToKey from Secrets to Headers files
      id: crytokey
      env:
        CRYTOKEY: ${{ secrets.CRYTOKEY }}
      run: |
        sed -i -r "s/crytokey = ([0-9]+)/crytokey = ${CRYTOKEY}/" configuration.h mainwindow.h
    - name: Build Debian Package
      run: |
        chmod +x ./get-version.sh
        chmod +x ./makedeb.sh
        ./makedeb.sh
    - name: Dump Package Version
      id: dump_version
      run: |
        VERSION=$(./get-version.sh)
        echo "::set-output name=version::$VERSION"
    - name: Dump Package Name
      id: dump_package_name
      env:
        DEB_VERSION: ${{ steps.dump_version.outputs.version }}
      run: |
        echo "::set-output name=deb_name::picta-dl-gui_$DEB_VERSION-1_amd64.deb"
    - name: Upload Package Binary Distribution to Release
      id: upload-release-binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.build_windows_exe.outputs.upload_url }}
        asset_path: ${{ steps.dump_package_name.outputs.deb_name }}
        asset_name: ${{ steps.dump_package_name.outputs.deb_name }}
        asset_content_type: application/octet-stream
    - name: Get SHA2-256SUMS for .deb
      id: sha2_deb
      env:
        DEB_NAME: ${{ steps.dump_package_name.outputs.deb_name }}
      run: |
        SHA2=$(sha256sum $DEB_NAME)
        echo "::set-output name=sha2_linux::$SHA2"
    - name: Make SHA2-256SUMS file
      env:
        SHA2_WINDOWS: ${{ needs.build_windows_exe.outputs.sha2_windows }}
        SHA2_WINDOWS_INSTALLER: ${{ needs.build_windows_exe.outputs.sha2_file_installer }}
        SHA2_DEB: ${{ steps.sha2_deb.outputs.sha2_linux }}
      run: |
        echo "${SHA2_WINDOWS}  Picta-dl_GUI.exe" > SHA2-256SUMS
        echo "${SHA2_WINDOWS_INSTALLER}  PictaDownloaderGUI-Installer.exe" >> SHA2-256SUMS
        echo "$SHA2_DEB" >> SHA2-256SUMS
    - name: Upload SHA2-256SUMS to Release
      id: upload-release-sha2 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.build_windows_exe.outputs.upload_url }}
        asset_path: ./SHA2-256SUMS
        asset_name: SHA2-256SUMS
        asset_content_type: text/plain
